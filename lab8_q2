#include <stdio.h>
#include <stdlib.h>

struct Node {
    int data;
    struct Node* next;
    struct Node* prev;
};

struct Node* insert(struct Node* head, int newData) {
    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
    newNode->data = newData;
    newNode->next = NULL;

    if (head == NULL) {
        newNode->prev = NULL;
        return newNode;
    }

    struct Node* current = head;

    while (current->next != NULL) {
        current = current->next;
    }

    current->next = newNode;
    newNode->prev = current;

    return head;
}

struct Node* concatenate(struct Node* X1, struct Node* X2) {
    if (X1 == NULL) {
        return X2;
    }

    struct Node* current = X1;

    while (current->next != NULL) {
        current = current->next;
    }

    current->next = X2;

    if (X2 != NULL) {
        X2->prev = current;
    }

    return X1;
}

void display(struct Node* node) {
    while (node != NULL) {
        printf("%d ", node->data);
        node = node->next;
    }
    printf("\n");
}

struct Node* createDLL() {
    struct Node* head = NULL;
    int n, data;

    printf("Enter the number of nodes: ");
    scanf("%d", &n);

    printf("\nEnter the elements:\n");
    for (int i = 0; i < n; ++i) {
        scanf("%d", &data);
        head = insert(head, data);
    }

    return head;
}

int main() {
    struct Node* X1 = NULL;
    struct Node* X2 = NULL;

    printf("Creating Doubly Linked List X1:\n");
    X1 = createDLL();

    printf("Creating Doubly Linked List X2:\n");
    X2 = createDLL();

    printf("Original Doubly Linked List X1: ");
    display(X1);

    printf("Original Doubly Linked List X2: ");
    display(X2);

    X1 = concatenate(X1, X2);

    printf("Concatenated Doubly Linked List: ");
    display(X1);

    return 0;
}
