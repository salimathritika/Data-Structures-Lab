//NOT COMPLETE

#include <stdio.h>
#include <string.h>
#define MAX_SIZE 100

char s[20][20];
int top=-1;

void push(char a[])
{
    if(top==MAX_SIZE-1)
        printf("\nStack is full");
    else
        strcpy(s[++top],a);
}

char *pop()
{
    if(top==-1)
        printf("\nEmpty");
    else
        return (s[top--]);
}

typedef enum{lparen,rparen,plus,minus,times,divide,mod,eos,operand}precedence;

precedence get_token(char c)
{
    switch(c)
    {
    case '(':return lparen;
    case ')':return rparen;
    case '+':return plus;
    case '-':return minus;
    case '*':return times;
    case '/':return divide;
    case '%':return mod;
    case '#':return eos;
    default:return operand;
    }
}

void(postfix2infix(char postfix[]))
{
    char temp1[10],temp2[10],op1[10],op2[10];
    int i=0;
    precedence temp;

    while(postfix[i]!='\0')
    {
        temp=get_token(postfix[i]);
        //temp1[0]=postfix[i];
        strcpy(temp1[0],postfix[i]);
        //temp1[1]='\0';
        strcpy(temp1[1],'\0');
        if(temp==operand)
            push (temp1);
        else
        {
            strcpy(op2,pop());
            //op1=pop();
            strcpy(op1,pop());
            strcpy(temp2,'(');
            strcat(temp2,op1);
            strcat(temp2,op2);
            strcpy(temp2,')');

            push(temp2);
        }
        i++;
    }
    printf("Final expression is:%s",temp2);
}

int main()
{
    char postfix[100];
    printf("\nEnter the postfix expression:");
    gets(postfix);
    postfix2infix(postfix);
}
