//STILL WORKING ON IT

#include<stdio.h>
#include<stdlib.h>

typedef struct
{
    struct node*llink;
    int data;
    struct node*rlink;
}node;

node *first=NULL;

node* create(node *prev,int ele,node *next)   //WORKS
{
    node *temp=(node*)malloc(sizeof(node));
    temp->rlink=next;
    temp->llink=prev;
    temp->data=ele;
    return temp;
}

void create_dll(int n )   //WORKS
{
    int i,ele;
    node *last;
    printf("Enter the elements:\n");
    for(i=0;i<n;i++)
    {
        scanf("%d",&ele);
        if(first==NULL)
            first=last=create(NULL,ele,NULL);
        else
            last=last->rlink=create(last,ele,NULL);
    }

}

void display()   //WORKS
{
    node *curr;
    if(first==NULL)
        printf("\nList is empty\n");
    else
        for(curr=first;curr!=NULL;curr=curr->rlink)
            printf("%d ",curr->data);
}

void display_rev()     //WORKS
{
    node *curr;
    if(first==NULL)
        printf("\nList is empty\n");
    else
        {
            for(curr=first;curr->rlink!=NULL;curr=curr->rlink);
            for(;curr!=NULL;curr=curr->llink)
                printf("%d ",curr->data);
        }
}

void delete_specific(int ele)   //WORKS
{
    node *curr;
    node *r,*l;
    for(curr=first;curr!=NULL;curr=curr->rlink)
    {
        if(curr->data==ele)
        {
            if(curr==first)
            {
                first=first->rlink;
                first->llink=NULL;
                free(curr);
            }
            else
            {
                r=curr->rlink;
                l=curr->llink;
                l->rlink=curr->rlink;
                r->llink=curr->llink;
            }

        }
    }
}

void insert_rear(int ele)   //WORKING
{
    node *temp=(node*)malloc(sizeof(node));
    temp->data=ele;
    node *curr;
    if(first==NULL)
    {
        first=temp;
        first->rlink=NULL;
        first->llink=NULL;
    }
    for(curr=first;curr->rlink!=NULL;curr=curr->rlink);
    curr->rlink=temp;
    temp->llink=curr;
    temp->rlink=NULL;
}

int delete_rear()   //WORKING
{
    node *curr,*prev;
    int a;
    if(first==NULL)
        {printf("\nList is empty\n");return -9999;}
    else
    {
        if(first->rlink==NULL)
        {
            a=first->data;
            first=NULL;
            return(a);
        }
        else
        {
            for(curr=first;curr->rlink!=NULL;curr=curr->rlink);
        prev=curr->llink;
        prev->rlink=NULL;
        a=curr->data;
        free(curr);
        return(a);
        }

    }
}

void insertAfter(int key, int data){    //NO IDEA

   //start from the first link
   node *curr = first;

   //if list is empty
   if(first == NULL) {
      printf("\nList is empty\n");
   }
   else
    {
        //navigate through list
   while(curr->data != key) {

      //if it is last node
      if(curr->rlink == NULL) {
         return ;
      } else {

         //move to next link
         curr = curr->next;
      }
   }

   //create a link
   struct node *newLink = (struct node*) malloc(sizeof(struct node));
   newLink->key = key;
   newLink->data = data;
   if(current == last) {
      newLink->next = NULL;
      last = newLink;
   } else {
      newLink->next = current->next;
      current->next->prev = newLink;
   }
   newLink->prev = current;
   current->next = newLink;

    }
   
}

int main()
{
    int n,ele,opt;
    printf("Enter the number of nodes:");
    scanf("%d",&n);
    create_dll(n);
    display();

    printf("\n1.To delete an element\n2.To display the list\n3.To display the list in reverse\n4.To insert element at the rear of the list\n5.To delete from rear of list\n-1.To exit\n");
    do
    {
        printf("\nEnter choice:");
        scanf("%d",&opt);
        switch(opt)
        {
        case 1:
            {
                printf("\nEnter element to be deleted:");
                scanf("%d",&ele);
                delete_specific(ele);
                break;
            }
        case 2:
            {
                display();
                break;
            }
        case 3:
            {
                display_rev();
                break;
            }
        case 4:
            {
                printf("\nEnter element to be inserted:");
                scanf("%d",&ele);
                insert_rear(ele);
                break;
            }
        case 5:
            {
                ele=delete_rear();
                if(ele!=-9999)
                printf("\nElement deleted is %d",ele);
                break;
            }
        case -1:
            {
                printf("\nExiting\n");
                break;
            }
        default:
            printf("\nInvalid operation\n");
        }

    }while(opt!=-1);
}
