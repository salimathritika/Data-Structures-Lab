//NEED TO EDIT 

#include <stdio.h>
#include <stdlib.h>

// Define a structure for a linked list node
struct Node {
    int data;
    struct Node* next;
};

// Function to create a new node
struct Node* createNode(int data) {
    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
    if (newNode == NULL) {
        printf("Memory allocation failed!\n");
        exit(1);
    }
    newNode->data = data;
    newNode->next = NULL;
    return newNode;
}

// Function to merge two sorted linked lists X and Y into a new linked list Z
struct Node* mergeSortedLists(struct Node* X, struct Node* Y) {
    // Initialize a dummy node to simplify insertion at the beginning
    struct Node dummy;
    struct Node* tail = &dummy;
    dummy.next = NULL;

    while (X != NULL && Y != NULL) {
        if (X->data <= Y->data) {
            tail->next = X;
            X = X->next;
        } else {
            tail->next = Y;
            Y = Y->next;
        }
        tail = tail->next;
    }

    // Attach the remaining nodes from X or Y if any
    if (X != NULL) {
        tail->next = X;
    } else {
        tail->next = Y;
    }

    // Return the merged list, skip the dummy node
    return dummy.next;
}

// Function to print the linked list
void printLinkedList(struct Node* head) {
    struct Node* current = head;
    while (current != NULL) {
        printf("%d -> ", current->data);
        current = current->next;
    }
    printf("NULL\n");
}

int main() {
    struct Node* X = createNode(1);
    X->next = createNode(3);
    X->next->next = createNode(5);

    struct Node* Y = createNode(2);
    Y->next = createNode(4);
    Y->next->next = createNode(6);

    printf("List X: ");
    printLinkedList(X);

    printf("List Y: ");
    printLinkedList(Y);

    struct Node* Z = mergeSortedLists(X, Y);

    printf("Merged List Z: ");
    printLinkedList(Z);

    // Free the memory allocated for the merged list (Z) in a real program

    return 0;
}
