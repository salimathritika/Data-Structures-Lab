#include <stdio.h>
#include <stdlib.h>

struct Node {
    int data;
    struct Node* next;
};

struct Node* createNode(int data) {
    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));

    newNode->data = data;
    newNode->next = NULL;
    return newNode;
}

struct Node* insertSorted(struct Node* head, int data) {
    struct Node* newNode = createNode(data);

    if (head == NULL || data <= head->data) {
        newNode->next = head;
        return newNode;
    }

    struct Node* current = head;

    while (current->next != NULL && current->next->data < data) {
        current = current->next;
    }

    newNode->next = current->next;
    current->next = newNode;

    return head;
}

struct Node* createSortedLinkedList() {
    struct Node* head = NULL;
    int n, data;

    printf("Enter the number of nodes in the sorted list: ");
    scanf("%d", &n);

    printf("Enter the sorted elements of the list:\n");
    for (int i = 0; i < n; ++i) {
        scanf("%d", &data);
        head = insertSorted(head, data);
    }

    return head;
}

struct Node* mergeSortedLists(struct Node* X, struct Node* Y) {
    struct Node dummy;
    struct Node* tail = &dummy;
    dummy.next = NULL;

    while (X != NULL && Y != NULL) {
        if (X->data <= Y->data) {
            tail->next = X;
            X = X->next;
        } else {
            tail->next = Y;
            Y = Y->next;
        }
        tail = tail->next;
    }

    if (X != NULL) {
        tail->next = X;
    } else {
        tail->next = Y;
    }

    return dummy.next;
}

void printLinkedList(struct Node* head) {
    struct Node* current = head;
    while (current != NULL) {
        printf("%d -> ", current->data);
        current = current->next;
    }
    printf("NULL\n");
}

int main() {
    struct Node* X = createSortedLinkedList();
    struct Node* Y = createSortedLinkedList();

    printf("List X: ");
    printLinkedList(X);

    printf("List Y: ");
    printLinkedList(Y);

    struct Node* Z = mergeSortedLists(X, Y);

    printf("Merged List Z: ");
    printLinkedList(Z);

    return 0;
}
