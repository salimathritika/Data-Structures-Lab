#include <stdio.h>
#include <stdlib.h>

typedef struct {
    int key;
    struct bst* left;
    struct bst* right;
}bst;

bst* createNode(int key) {
    bst* newNode = (bst*)malloc(sizeof(bst));
    newNode->key = key;
    newNode->left = newNode->right = NULL;
    return newNode;
}

bst* insert(bst* root, int key) {
    if (root == NULL) {
        return createNode(key);
    }

    if (key < root->key) {
        root->left = insert(root->left, key);
    } else if (key > root->key) {
        root->right = insert(root->right, key);
    }

    return root;
}

void inOrderTraversal(bst* root) {
    if (root != NULL) {
        inOrderTraversal(root->left);
        printf("%d ", root->key);
        inOrderTraversal(root->right);
    }
}

bst* search(bst* root, int key) {
    if (root == NULL || root->key == key) {
        return root;
    }

    if (key < root->key) {
        return search(root->left, key);
    }

    return search(root->right, key);
}


int main() {
    bst* root = NULL;

    int n, keyToSearch;

    printf("Enter the number of elements in the BST: ");
    scanf("%d", &n);

    printf("Enter the elements of the BST:\n");
    for (int i = 0; i < n; ++i) {
        int key;
        scanf("%d", &key);
        root = insert(root, key);
    }

    printf("Enter the key to search in the BST: ");
    scanf("%d", &keyToSearch);

    printf("In-order traversal of the BST: ");
    inOrderTraversal(root);
    printf("\n");

    bst* result = search(root, keyToSearch);

    if (result != NULL) {
        printf("Key %d is found in the BST.\n", keyToSearch);
    } else {
        printf("Key %d is not found in the BST.\n", keyToSearch);
    }

    return 0;
}
