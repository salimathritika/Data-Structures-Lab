//NOT WORKING

#include<stdio.h>
#include<stdlib.h>

typedef struct
{
    int data;
    struct tree *lchild;
    struct tree *rchild;
}bst;

bst *root=NULL;

void create(int n)
{
    int key,flag=0;
    bst *curr=root;
    while(n>0)
    {
        printf("Enter key:");
        scanf("%d",&key);
        bst *temp=(bst*)malloc(sizeof(bst));
        temp->data=key;
        temp->rchild=NULL;
        temp->lchild=NULL;
        curr=root;
        while(curr!=NULL)
        {
            if(curr->data>key)
                curr=curr->lchild;
            else if(curr->data<key)
                curr=curr->rchild;
            else
            {
                printf("This key already exists");
                flag=1;
                break;
            }
        }
        if(flag==0)
            curr=temp;
        n--;
    }
}

/*bst*search(int key)
{
    bst *curr=root;
    while(curr!=NULL)
    {
        if((curr->data)==key)
            return curr;
        if((curr->data)>key)
            curr=curr->rchild;
        else
            curr=curr->lchild;
    }

    return (NULL);
}*/
bst* search(bst* root, int key)
{
    // Base Cases: root is null or key is present at root
    if (root == NULL || root->data == key)
        return root;

    // Key is greater than root's key
    if (root->data < key)
        return search(root->rchild, key);

    // Key is smaller than root's key
    return search(root->lchild, key);
}

int main()
{
    int n;
    printf("Enter the total number of nodes:");
    scanf("%d",&n);
    create(n);
    printf("\nTree is created");

    printf("\nEnter key to be searched:");
    int key;
    scanf("%d",&key);
    bst *x;
    x=search(root,key);
    printf("\nElement found %d",x->data);
}

