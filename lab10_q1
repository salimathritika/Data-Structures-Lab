//CREATE FUNCTION ITSELF NOT WORKING

#include<stdio.h>
#include<stdlib.h>

typedef struct
{
    int data;
    struct tree *lchild;
    struct tree *rchild;
}tree;

tree *root;

void inorder()
{
    tree *curr=root;
    tree *stack[20];
    int top=-1;
    while(1)
    {
        while(curr!=NULL)
        {
            stack[++top]=curr;
            curr=curr->lchild;
        }
        if(top>-1)
            curr=stack[top--];
        else
            break;
        printf("%d ",curr->data);
        curr=curr->rchild;
    }
}

void postorder()
{
    tree *curr=root;
    tree *stack[20];
    int top=-1;
    while(1)
    {
        while(curr!=NULL)
        {
            stack[++top]=curr;
            curr=curr->lchild;
        }
        if(top>-1)
            curr=stack[top--];
        else
            break;
        curr=curr->rchild;
        printf("%d ",curr->data);
    }
}

void preorder()
{
    tree*curr=root;
    tree *stack[20];
    int top=-1;
    while(1)
    {
        while(curr!=NULL)
        {
            printf("%d ",curr->data);
            stack[++top]=curr;
            curr=curr->lchild;
        }
        if(top>-1)
            curr=stack[top--];
        else
            break;
        curr=curr->rchild;
    }
}

void count_leaf()
{
    tree *curr=root;
    tree *q[20];
    int front=-1,rear=-1,cl=0,tot=0;
    q[++rear]=root;
    while(front!=rear)
    {
        curr=q[++front];
        tot++;
        if(curr->lchild==NULL && curr->rchild==NULL)
            cl++;
        if(curr->lchild!=NULL)
            q[++rear]=curr->lchild;
        if(curr->rchild!=NULL)
            q[++rear]=curr->rchild;
    }
    printf("Leaf nodes:%d",cl);
    printf("Non leaf nodes:%d",(tot-cl));
}

void create_BT()
{
    tree *curr=root;
    tree *temp;
    tree *prev;
    int i,n,j;
    printf("Enter no. of nodes:");
    scanf("%d",&n);
    char dir[20];
    for(j=0;j<n;j++)
    {
        temp=(tree*)malloc(sizeof(tree));
        printf("Enter data:");
        scanf("%d",&temp->data);
        temp->lchild=NULL;
        temp->rchild=NULL;
        if(root==NULL)
            root=temp;
        else
        {
            printf("enter the direction:");
            scanf("%s",dir);
            curr=root;
            i=0;
            while(dir[i]!='\0')
            {
                prev=curr;
                if(dir[i]=='l' || dir[i]=='L')
                    curr=curr->lchild;
                else
                    curr=curr->rchild;
                i++;
            }
            if(curr!=NULL || dir[i]!='\0')
                printf("Invalid direction entered");
            else
            {
                if(dir[i-1]=='l')
                    prev->lchild=temp;
                else
                    prev->rchild=temp;
            }
        }
    }
}

int depth(tree *ptr)
{
    int ldepth=0,rdepth=0;
    if(ptr==NULL)
        return 0;
    else
    {
        ldepth=depth(ptr->rchild);
        rdepth=depth(ptr->rchild);
        if(ldepth>rdepth)
            printf("%d",(ldepth));
        else
            printf("%d",(rdepth+1));
    }
}

int main()
{
    int opt;
    printf("1.To create binary tree\n2.To find depth of tree\n3.To print inorder traversal\n4.to print postorder traversal\n5.To print preoder traversal\n6.To count number of leaf nodes\n-1.To exit\n");
    scanf("%d",&opt);
    switch(opt)
    {
    case 1:
        {
            create_BT();
            break;
        }
    case 2:
        {
            int d=depth(root);
            printf("Depth of tree=%d",d);
            break;
        }
    case 3:
        {
            inorder();
            break;
        }
    case 4:
        {
            postorder();
            break;
        }
    case 5:
        {
            preorder();
            break;
        }
    case 6:
        {
            count_leaf();
            break;
        }
    case -1:
        {
            printf("Exiting\n");
        }
    }while(opt!=-1);
}
