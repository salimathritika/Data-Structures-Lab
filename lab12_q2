#include <stdio.h>
#include <stdlib.h>

// Structure to represent a node in the adjacency list
struct Node {
    int vertex;
    struct Node* next;
};

// Structure to represent the adjacency list
struct Graph {
    int numVertices;
    struct Node* adjList;
};

// Function to create a new node
struct Node* createNode(int vertex) {
    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
    newNode->vertex = vertex;
    newNode->next = NULL;
    return newNode;
}

// Function to create a graph with a given number of vertices
struct Graph* createGraph(int numVertices) {
    struct Graph* graph = (struct Graph*)malloc(sizeof(struct Graph));
    graph->numVertices = numVertices;
    graph->adjList = (struct Node*)malloc(numVertices * sizeof(struct Node));

    for (int i = 0; i < numVertices; i++) {
        graph->adjList[i].next = NULL;
    }

    return graph;
}

// Function to add an edge to the graph
void addEdge(struct Graph* graph, int src, int dest, int isDirected) {
    // Add an edge from src to dest
    struct Node* newNode = createNode(dest);
    newNode->next = graph->adjList[src].next;
    graph->adjList[src].next = newNode;

    // If the graph is undirected, add an edge from dest to src as well
    if (!isDirected) {
        newNode = createNode(src);
        newNode->next = graph->adjList[dest].next;
        graph->adjList[dest].next = newNode;
    }
}

// Function to display the adjacency list
void displayGraph(struct Graph* graph) {
    printf("Adjacency List:\n");
    for (int i = 0; i < graph->numVertices; i++) {
        struct Node* currentNode = graph->adjList[i].next;  // Skip the dummy node
        printf("Vertex %d: ", i);
        while (currentNode != NULL) {
            printf("%d -> ", currentNode->vertex);
            currentNode = currentNode->next;
        }
        printf("NULL\n");
    }
}

int main() {
    int numVertices, numEdges, src, dest, isDirected;

    printf("Enter the number of vertices: ");
    scanf("%d", &numVertices);

    struct Graph* graph = createGraph(numVertices);

    printf("Enter the number of edges: ");
    scanf("%d", &numEdges);

    for (int i = 0; i < numEdges; i++) {
        printf("Enter edge %d (source destination isDirected): ", i + 1);
        scanf("%d %d %d", &src, &dest, &isDirected);

        // Check if the source and destination are within the valid range
        if (src < 0 || src >= numVertices || dest < 0 || dest >= numVertices) {
            printf("Invalid source or destination. Please enter valid vertices.\n");
            i--;
            continue;
        }

        addEdge(graph, src, dest, isDirected);
    }

    displayGraph(graph);

    return 0;
}
