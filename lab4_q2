#include<stdio.h>

int m=3;
int n=4;

typedef struct
{
    int row;
    int col;
    int val;
}sparse;

sparse s[100],tr[100];
void fast_transpose(sparse a[],sparse b[]);

int main()
{
    int i,j,k=0,ele;
    printf("Enter the order of the matrix:\n");
    scanf("%d",&m);
    scanf("%d",&n);

    printf("Enter the elements of the matrix:\n");
    for(i=0;i<m;i++)
    {
        for(j=0;j<n;j++)
        {
            scanf("%d",&ele);
            if(ele!=0)
            {
                k++;
                s[k].row=i;
                s[k].col=j;
                s[k].val=ele;
            }
        }
    }
    s[0].row=m;
    s[0].col=n;
    s[0].val=k;
    fast_transpose(s,tr);


    printf("The matrix is:\n");
    printf("row\tcol\tval\n");
    for(i=0;i<=s[0].val;i++)
    {
        printf("%d\t%d\t%d",s[i].row,s[i].col,s[i].val);
        printf("\n");
    }

    k=1;
    printf("The transpose of the matrix is:\n");
    printf("row\tcol\tval\n");
    for(i=0;i<=tr[0].val;i++)
    {
        printf("%d\t%d\t%d",tr[i].row,tr[i].col,tr[i].val);
        printf("\n");
    }
}

void fast_transpose(sparse a[],sparse b[])
{

    int non_zero[n],starting_pos[n];
    int i,j,numcols=a[0].col,numterms=a[0].val;
    b[0].row=numcols;
    b[0].col=a[0].row;
    b[0].val=numterms;
    if(numterms>0)
    {
        for(i=0;i<numcols;i++)
           non_zero[i]=0;
        for(i=1;i<=numterms;i++)
            non_zero[a[i].col]++;
        starting_pos[0]=1;
        for(i=1;i<numcols;i++)
            starting_pos[i]=starting_pos[i-1]+non_zero[i-1];
        for(i=1;i<=numterms;i++)
        {
            j=starting_pos[a[i].col]++;
            b[j].row=a[i].col;
            b[j].col=a[i].row;
            b[j].val=a[i].val;
        }
    }
}
