#include <stdio.h>
#include <stdlib.h>

struct queue
{
    int size;
    int f;
    int r;
    int* arr;
};

int isEmpty(struct queue *q) {
    return q->r == q->f;
}

int isFull(struct queue *q) {
    return q->r == q->size - 1;
}

void enqueue(struct queue *q, int val) {
    if (isFull(q)) {
        printf("This Queue is full\n");
    }
    else {
        q->r++;
        q->arr[q->r] = val;
        // printf("Enqueued element: %d\n", val);
    }
}

int dequeue(struct queue *q) {
    int a = -1;
    if (isEmpty(q)) {
        printf("This Queue is empty\n");
    }
    else {
        q->f++;
        a = q->arr[q->f];
    }
    return a;
}

int main() {
    struct queue q;
    q.size = 400;
    q.f = q.r = 0;
    q.arr = (int*)malloc(q.size * sizeof(int));

    // BFS Implementation
    int numVertices;
    printf("Enter the number of vertices: ");
    scanf("%d", &numVertices);

    int i, j;
    int visited[numVertices];
    int adjacencyMatrix[numVertices][numVertices];

    // Input the adjacency matrix
    printf("Enter the adjacency matrix (0 or 1) for the graph:\n");
    for (i = 0; i < numVertices; i++) {
        for (j = 0; j < numVertices; j++) {
            scanf("%d", &adjacencyMatrix[i][j]);
        }
    }

    // Initialize visited array
    for (i = 0; i < numVertices; i++) {
        visited[i] = 0;
    }

    // Input the starting node
    int startNode;
    printf("Enter the starting node: ");
    scanf("%d", &startNode);

    printf("%d ", startNode);
    enqueue(&q, startNode);
    visited[startNode] = 1;

    while (!isEmpty(&q)) {
        int node = dequeue(&q);
        for (j = 0; j < numVertices; j++) {
            if (adjacencyMatrix[node][j] == 1 && visited[j] == 0) {
                printf("%d ", j);
                visited[j] = 1;
                enqueue(&q, j);
            }
        }
    }

    return 0;
}
