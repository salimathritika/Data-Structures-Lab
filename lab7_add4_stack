#include <stdio.h>
#include <stdlib.h>

typedef struct {
    int data;
    struct node *next;
}node;

node *top=NULL;
/*
Checks if Stack is empty or not
*/
int isEmpty() {
    if (top == NULL)
        return 1;
    else
        return 0;
}

/*
Returns the top element of Stack
*/
int peek() {
    return top->data;
}

/* Count stack elements */
int getStackSize(node *head){
    if (head == NULL) {
       printf("Error : Invalid stack pointer !!!\n");
       return;
    }

    int length = 0;
    while(head != NULL){
        head = head->next;
        length++;
    }
    return length;
}

/*
Push an Element in Stack
*/
void push(int num) {
    node *temp;
    temp =(node *)malloc(sizeof(node));
    temp->data = num;

    if (top == NULL) {
        top = temp;
        top->next = NULL;
    } else {
        temp->next = top;
        top = temp;
    }
}

/*
Pop Operation: Removes Top Element of the Stack
*/
void pop() {
    node *temp;
    if (isEmpty(top)) {
        printf("\nStack is Empty\n");
        return;
    } else {
        temp = top;
        top = top->next;
        printf("Removed  Element : %d\n", temp->data);
        free(temp);
    }
}

/*
 Prints the linked list representation of a stack
*/
void printStack(node *nodePtr) {
  while (nodePtr != NULL) {
     printf("%d", nodePtr->data);
     nodePtr = nodePtr->next;
     if(nodePtr != NULL)
         printf("-->");
  }
  printf("\n");
}

void main() {

   int opt,ele;
   printf("1.Push\n2.Pop\n3.Display\n4.Size of stack\n5.Peek\n6.Exit\n");
   do
   {
       printf("Enter choice:");
       scanf("%d",&opt);
       switch(opt)
       {
           case 1:
               {
                   printf("Enter the element:");
                   scanf("%d",&ele);
                   push(ele);
                   break;
               }
           case 2:
            {
                pop();
                break;
            }
           case 3:
            {
                printStack(top);
                break;
            }
           case 4:
            {
                getStackSize(top);
                break;
            }
           case 5:
            {
                printf("Data is:%d\n",peek());
                break;
            }

       }
   }while(opt!=6);

}
