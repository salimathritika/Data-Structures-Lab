#include <stdio.h>

#define MAX_VERTICES 10

void initializeMatrix(int matrix[MAX_VERTICES][MAX_VERTICES]) {
    for (int i = 0; i < MAX_VERTICES; i++) {
        for (int j = 0; j < MAX_VERTICES; j++) {
            matrix[i][j] = 0;
        }
    }
}

void addEdge(int matrix[MAX_VERTICES][MAX_VERTICES], int source, int destination, int isDirected) {
    matrix[source][destination] = 1;
    if (!isDirected) {
        matrix[destination][source] = 1;
    }
}

void displayMatrix(int matrix[MAX_VERTICES][MAX_VERTICES], int vertices) {
    printf("Adjacency Matrix:\n");
    for (int i = 0; i < vertices; i++) {
        for (int j = 0; j < vertices; j++) {
            printf("%d ", matrix[i][j]);
        }
        printf("\n");
    }
}

int main() {
    int graphMatrix[MAX_VERTICES][MAX_VERTICES];
    int vertices, edges, source, destination, isDirected;

    printf("Enter the number of vertices (max %d): ", MAX_VERTICES);
    scanf("%d", &vertices);

    if (vertices > MAX_VERTICES) {
        printf("Number of vertices exceeds the limit. Exiting.\n");
        return 1;
    }

    initializeMatrix(graphMatrix);

    printf("Enter the number of edges: ");
    scanf("%d", &edges);

    for (int i = 0; i < edges; i++) {
        printf("Enter edge %d (source destination isDirected): ", i + 1);
        scanf("%d %d %d", &source, &destination, &isDirected);

        if (source < 0 || source >= vertices || destination < 0 || destination >= vertices) {
            printf("Invalid source or destination. Please enter valid vertices.\n");
            i--;
            continue;
        }

        addEdge(graphMatrix, source, destination, isDirected);
    }

    displayMatrix(graphMatrix, vertices);

    return 0;
}
