//NEED TO EDIT

#include <stdio.h>
#include <stdlib.h>

// Define a structure for a linked list node
struct Node {
    int data;
    struct Node* next;
};

// Function to create a new node and add it to the end of the linked list
struct Node* createNode(int data) {
    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
    if (newNode == NULL) {
        printf("Memory allocation failed!\n");
        exit(1);
    }
    newNode->data = data;
    newNode->next = NULL;
    return newNode;
}

// Function to insert a new node at the end of the linked list recursively
void insertAtEnd(struct Node* current, int data) {
    if (current->next == NULL) {
        // Create a new node and add it to the end
        current->next = createNode(data);
    } else {
        // Recursively call the function on the next node
        insertAtEnd(current->next, data);
    }
}

// Function to traverse and print the elements of the linked list recursively
void traverseLinkedList(struct Node* current) {
    if (current == NULL) {
        return; // Base case: If the current node is NULL, the list is empty, so we're done.
    }
    printf("%d -> ", current->data);
    traverseLinkedList(current->next); // Recursively call the function on the next node
}

int main() {
    struct Node* head = NULL;

    // Insert elements into the linked list
    insertAtEnd(head, 1);
    insertAtEnd(head, 2);
    insertAtEnd(head, 3);
    insertAtEnd(head, 4);

    printf("Linked List: ");
    traverseLinkedList(head);
    printf("NULL\n");

    // Don't forget to free the memory allocated for the linked list nodes in a real program
    return 0;
}
